"""
Даны точки на плоскости, координаты которых занесены в массивы x_array и y_array.
Постройте по этим точкам наиболее подходящий тренд:
линейный (полином первой степени)  или квадратичный (полином второй степени).
Для этого для каждого типа тренда:

найдите коэффициенты полинома;
сформируйте массив значений, посчитанных по формуле тренда в точках  x_array;
вычислите среднюю ошибку между известными значениями y_array и посчитанными с помощью формулы тренда
(начала посчитать относительную погрешность между координатой  точки по оси ОУ и значением тренда в этой точке,
потом найти среднее значение погрешности).

Далее необходимо сравнить среднюю погрешность двух трендов и вывести коэффициенты тренда  с наименьшей средней ошибкой.
Если ошибки одинаковы, то выводить коэффициенты полинома второй степени.

Входные данные:

строка, в которой через пробел заданы координаты точек по оси OX (вещественные числа);
строка, в которой через пробел заданы координаты точек по оси OY (вещественные числа).
Выходные данные:

коэффициенты полинома, описывающего линию тренда.
Для вывода коэффициентов используйте форматный вывод:

"%5.3f %5.3f"

или

"%5.3f %5.3f %5.3f"
"""

мпортируем
модуль
numpy, дадим
ему
имя
np

import numpy as np

# Сформируем массивы координат точек:

# x_array = np.array([18.6, 99.9, 157.2, 219.9, 303.7, 399.6, 452.5, 528.4, 613.8, 669.7, 750.6, 816.2, 906.2])
x_array = np.array(list(map(float, input().split())))

# h_array = np.array([85.7, 173.8, 196.7, 259.6, 332.5, 379.3, 414.2, 419.7, 461.3, 438.9, 447.8, 434.1, 441.4])
h_array = np.array(list(map(float, input().split())))

# Вычисляем коэффициенты полинома 1-й и 2-й степени
k_poly_1 = np.polyfit(x_array, h_array, 1)
k_poly_2 = np.polyfit(x_array, h_array, 2)


# Определяем функцию тренда для полинома 2-й степени


def get_trend_2(x, a):
    y = a[0] * x ** 2 + a[1] * x + a[2]

    return y


# Определяем функцию тренда для полинома 1-й степени
def get_trend_1(x, a):
    y = a[0] * x + a[1]

    return y


# Создаем массив значений по OY для полинома 1-й степени
trend_1 = get_trend_1(x_array, k_poly_1)

# Создаем массив значений по OY для полинома 2-й степени
trend_2 = get_trend_2(x_array, k_poly_2)

# Высчитываем относительные ошибки ОУ для каждого значения  по ОХ для полинома 1-й степени и заносим их в массив:
delta_1 = abs(trend_1 - h_array) / abs(h_array)

# Высчитываем относительные ошибки ОУ для каждого значения  по ОХ для полинома 2-й степени и заносим их в массив:
delta_2 = abs(trend_2 - h_array) / abs(h_array)

# Высчитываем среднюю ошибку для тренда 1
avr_delta_1 = np.mean(delta_1)

# Высчитываем среднюю ошибку для тренда 2
avr_delta_2 = np.mean(delta_2)

if avr_delta_1 < avr_delta_2:
    print("%5.3f %5.3f" % (k_poly_1[0], k_poly_1[1]))
else:
    print("%5.3f %5.3f %5.3f" % (k_poly_2[0], k_poly_2[1], k_poly_2[2]))
